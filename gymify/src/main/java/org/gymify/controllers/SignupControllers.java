package org.gymify.controllers;

import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.stage.Stage;
import org.gymify.entities.User;
import org.gymify.services.ServiceUser;

import java.io.IOException;
public class SignupControllers {

    @FXML
    private PasswordField ConfPasswdField;

    @FXML
    private TextField EmailField;

    @FXML
    private TextField LastNameTextField;

    @FXML
    private PasswordField PasswdField;

    @FXML
    private Button RegisterButton;

    @FXML
    private TextField UserNameTextField;

    @FXML
    private Label errorConfirmPassword;

    @FXML
    private Label errorEmail;

    @FXML
    private Label errorNom;

    @FXML
    private Label errorPassword;

    @FXML
    private Label errorPrenom;

    private final ServiceUser serviceUser = new ServiceUser();

    @FXML
    void ButtonRegisterOnAction(ActionEvent event) {
        System.out.println("‚û° Bouton Inscription cliqu√© !");

        // ‚úÖ R√©initialiser les messages d'erreur
        errorNom.setText("");
        errorPrenom.setText("");
        errorEmail.setText("");
        errorPassword.setText("");
        errorConfirmPassword.setText("");

        boolean hasError = false;

        // ‚úÖ R√©cup√©ration des valeurs
        String nom = UserNameTextField.getText();
        String prenom = LastNameTextField.getText();
        String email = EmailField.getText();
        String password = PasswdField.getText();
        String confirmPassword = ConfPasswdField.getText();

        // ‚úÖ V√©rification des champs vides
        if (nom.isEmpty()) {
            errorNom.setText("‚ùå Ce champ est requis.");
            hasError = true;
        }
        if (prenom.isEmpty()) {
            errorPrenom.setText("‚ùå Ce champ est requis.");
            hasError = true;
        }
        if (email.isEmpty()) {
            errorEmail.setText("‚ùå Ce champ est requis.");
            hasError = true;
        } else if (!email.matches("^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+$")) {
            errorEmail.setText("‚ùå Email invalide. Exemple : exemple@email.com");
            hasError = true;
        } else if (emailExiste(email)) { // V√©rifier si l'email est d√©j√† utilis√©
            errorEmail.setText("‚ùå Cet email est d√©j√† utilis√©.");
            hasError = true;
        }

        if (password.isEmpty()) {
            errorPassword.setText("‚ùå Ce champ est requis.");
            hasError = true;
        }
        if (confirmPassword.isEmpty()) {
            errorConfirmPassword.setText("‚ùå Ce champ est requis.");
            hasError = true;
        } else if (!password.equals(confirmPassword)) {
            errorConfirmPassword.setText("‚ùå Les mots de passe ne correspondent pas.");
            hasError = true;
        }

        // üö® Arr√™ter l'ex√©cution si une erreur est d√©tect√©e
        if (hasError) {
            return;
        }

        // ‚úÖ Cr√©ation de l'utilisateur avec le r√¥le "sportif"
        User newUser = new User(nom, prenom, password, email, "sportif");
        System.out.println("Tentative d'inscription de : " + email);

        try {
            boolean success = serviceUser.inscrire(newUser);
            if (success) {
                System.out.println("‚úÖ Inscription r√©ussie !");
                showAlert(Alert.AlertType.INFORMATION, "‚úÖ Succ√®s", "Inscription r√©ussie ! Vous pouvez vous connecter.");

                // ‚úÖ Redirection vers la page de connexion
                ouvrirInterface("Login.fxml", "üîë Connexion");
            } else {
                System.out.println("‚ùå √âchec de l'inscription !");
                showAlert(Alert.AlertType.ERROR, "‚ùå Erreur", "Cet email est d√©j√† utilis√©. Essayez un autre.");
            }
        } catch (Exception e) {
            System.out.println("‚ùå Erreur lors de l'inscription : " + e.getMessage());
            showAlert(Alert.AlertType.ERROR, "‚ùå Erreur", "Probl√®me avec la base de donn√©es.");
            e.printStackTrace();
        }
    }

    /**
     * üîπ V√©rifie si un email est d√©j√† utilis√© dans la base de donn√©es.
     */
    private boolean emailExiste(String email) {
        return serviceUser.emailExiste(email); // Impl√©mente cette m√©thode dans ServiceUser
    }

    /**
     * üîπ M√©thode pour ouvrir une interface FXML
     */
    private void ouvrirInterface(String fxmlPath, String title) {
        try {
            System.out.println("‚û° Ouverture de l'interface : " + fxmlPath);
            FXMLLoader loader = new FXMLLoader(getClass().getResource("/" + fxmlPath)); // Correction du chemin
            Parent root = loader.load();
            Stage stage = new Stage();
            stage.setTitle(title);
            stage.setScene(new Scene(root));
            stage.show();

            // üîπ Fermer la fen√™tre actuelle
            Stage signUpStage = (Stage) RegisterButton.getScene().getWindow();
            signUpStage.close();

        } catch (IOException e) {
            System.out.println("‚ùå Erreur d'ouverture de l'interface : " + e.getMessage());
            showAlert(Alert.AlertType.ERROR, "‚ùå Erreur", "Impossible d'ouvrir l'interface : " + fxmlPath);
            e.printStackTrace();
        }
    }

    /**
     * üîπ Affichage d'une alerte
     */
    private void showAlert(Alert.AlertType alertType, String title, String message) {
        Alert alert = new Alert(alertType);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }
}
